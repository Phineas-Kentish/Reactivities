{"version":3,"sources":["app/models/activity.ts","app/models/Profile.ts","app/api/agent.ts","app/api/stores/ActivityStore.ts","app/api/stores/UserStore.ts","app/api/stores/Store.ts","app/api/stores/commonStore.ts","app/api/stores/ModalStore.ts","app/api/stores/CommentStore.ts","app/layout/NavBar.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","app/layout/LoadingComponent.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/common/form/MyDateInput.tsx","app/common/form/MySelectInput.tsx","app/common/form/MyTextArea.tsx","app/common/form/options/CategoryOptions.ts","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["Activity","init","Object","assign","this","ActivityFormValues","activity","id","undefined","title","category","description","date","city","venue","Profile","user","username","displayName","image","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","error","data","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","console","log","requests","url","get","then","body","post","put","delete","agent","Activities","list","details","create","update","attend","Account","current","login","register","fbLogin","accessToken","ActivityStore","activities","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","loadActivities","setLoadingInitial","forEach","setActivity","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","u","Date","set","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivitiyToggle","isCancelled","clearSelectedActivity","makeAutoObservable","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","format","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","activityStore","getItem","appLoaded","setAppLoaded","reaction","setItem","modal","open","openModal","content","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","profile","Card","Content","Header","Description","extra","Icon","List","horizontal","map","Popup","hoverable","trigger","size","circular","ProfileCard","ActivityListItem","Segment","Group","Label","attached","color","textAlign","marginBottom","basic","secondary","clearing","floated","groupedActivities","group","sub","LoadingComponent","Dimmer","active","Loader","ActivityFilters","vertical","width","marginTop","useEffect","Grid","Column","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","fluid","ValidationErrors","Message","i","validationSchema","Yup","required","isValid","dirty","disabled","isLoggedIn","Divider","sixe","MyDateInput","helpers","selected","value","onChange","setValue","MySelectInput","Select","clearable","options","event","onBlur","setTouched","MyTextArea","categoryOptions","useHistory","useParams","useState","validationShema","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","e","shiftKey","preventDefault","Comment","c","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","err","primary","NotFound","Inline","message","Modal","onClose","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.d90693cc.chunk.js","sourcesContent":["import { Profile } from \"./Profile\";\r\n\r\nexport interface Activity {\r\n    id: string\r\n    title: string\r\n    date: Date | null\r\n    description: string\r\n    category: string\r\n    city: string\r\n    venue: string\r\n    hostUsername?: string\r\n    isCancelled?: boolean\r\n    isGoing: boolean\r\n    isHost: boolean\r\n    host?: Profile\r\n    attendees: Profile[]\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init)\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined\r\n    title: string = \"\"\r\n    category: string = \"\"\r\n    description: string = \"\"\r\n    date: Date | null = null\r\n    city: string = \"\"\r\n    venue: string = \"\"\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id\r\n            this.title = activity.title\r\n            this.category = activity.category\r\n            this.description = activity.description\r\n            this.date = activity.date\r\n            this.venue = activity.venue\r\n            this.city = activity.city            \r\n        }\r\n    }\r\n}","import { User } from \"./user\"\r\n\r\nexport interface Profile {\r\n    username: string\r\n    displayName: string\r\n    image?: string\r\n    bio?: string\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username\r\n        this.displayName = user.displayName\r\n        this.image = user.image        \r\n    }\r\n}","import axios, {AxiosError, AxiosResponse} from 'axios'\r\nimport {Activity, ActivityFormValues} from '../models/activity'\r\nimport {toast} from 'react-toastify'\r\nimport { history } from '../..'\r\nimport { store } from './stores/Store' \r\nimport { User, UserFormValues } from '../models/user'\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL\r\n\r\n// Add JWT header \r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config\r\n})\r\n\r\naxios.interceptors.response.use(async response => {    \r\n    return response\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!\r\n    switch(status){\r\n        case 400:\r\n            if(typeof data === \"string\") {\r\n                toast.error(data)\r\n            }\r\n            if(config.method === \"get\" && data.errors.hasOwnProperty(\"id\")) {\r\n                history.push(\"/not-found\")    \r\n            }\r\n            if(data.errors){\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat()\r\n            }         \r\n            break\r\n        case 401:\r\n            toast.error(\"Unauthorized\")\r\n            break\r\n        case 404:\r\n            history.push(\"/not-found\")\r\n            break\r\n        case 500:\r\n            store.commonStore.setServerError(data)\r\n            history.push(\"server-error\")\r\n            break\r\n    }\r\n\r\n    return Promise.reject(error)\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => {\r\n    console.log(response)\r\n    return response.data\r\n}\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    delete: <T> (url: string) => axios.delete<T>(url).then(responseBody),    \r\n}\r\n\r\n// Requests for Activities\r\nconst Activities = {\r\n    list: () => requests.get<Activity[]>(\"/activities\"),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>(\"/activities\", activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.delete<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n}\r\n\r\n// Requests for Authentication\r\nconst Account = {\r\n    current: () => requests.get<User>(\"/account\"),\r\n    login: (user: UserFormValues) => requests.post<User>(\"account/login\", user),\r\n    register: (user: UserFormValues) => requests.post<User>(\"account/register\", user),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account\r\n}\r\n\r\nexport default agent","import { format } from \"date-fns\"\r\nimport { makeAutoObservable, runInAction } from \"mobx\"\r\nimport { Activity, ActivityFormValues } from \"../../models/activity\"\r\nimport { Profile } from \"../../models/Profile\"\r\nimport agent from \"../agent\"\r\nimport { store } from \"./Store\"\r\n\r\n// This is a store, it is globally accessible like this:\r\n// \r\n//      import { useStore } from '../api/stores/Store';\r\n//      const {activityStore} = useStore()\r\n//      console.log(activityStore.activities)\r\n// \r\n\r\nexport default class ActivityStore {  \r\n    activities: Activity[] = []\r\n    activityRegistry = new Map<string, Activity>()\r\n    selectedActivity: Activity | undefined = undefined\r\n    editMode = false\r\n    loading = false\r\n    loadingInitial = true    \r\n\r\n    \r\n    constructor() {\r\n        // This function will turn all properties and methods into observables and actions\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \r\n            a.date!.getTime() - b.date!.getTime())\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, \"dd MMM yyyy\")\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity]                \r\n                return activities\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n    \r\n    loadActivities = async () => {  \r\n        this.setLoadingInitial(true)      \r\n        try {\r\n            const activities = await agent.Activities.list()            \r\n            activities.forEach(activity => {\r\n                this.setActivity(activity)\r\n            })\r\n            this.setLoadingInitial(false)\r\n        } catch (error) {\r\n            console.log(\"Error\", error)            \r\n            this.setLoadingInitial(false)            \r\n        }\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id)\r\n        if(activity) {\r\n            this.selectedActivity = activity\r\n            return activity\r\n        } else {\r\n            this.loadingInitial = true\r\n            try {\r\n                activity = await agent.Activities.details(id)\r\n                this.setActivity(activity)\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity\r\n                })                \r\n                this.setLoadingInitial(false)\r\n                return activity\r\n            } catch (error) {\r\n                console.log(error)\r\n                this.setLoadingInitial(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {        \r\n        var user = store.userStore.user\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user?.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username\r\n            activity.host = activity.attendees?.find(u => u.username === activity.hostUsername)\r\n        }\r\n        activity.date = new Date(activity.date!)\r\n        this.activityRegistry.set(activity.id, activity)     \r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id)\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user\r\n        const attendee = new Profile(user!)\r\n        try {\r\n            await agent.Activities.create(activity)\r\n            const newActivity = new Activity(activity)\r\n            newActivity.hostUsername = user!.username\r\n            newActivity.attendees = [attendee]\r\n            this.setActivity(newActivity)\r\n            runInAction(() => {                                \r\n                this.selectedActivity = newActivity\r\n            })\r\n        } catch (error) {\r\n            console.log(error.response)\r\n        }\r\n\t}\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {        \r\n        try {\r\n            await agent.Activities.update(activity)\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity)\r\n                    this.selectedActivity = updatedActivity as Activity\r\n                }                                                \r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\t}\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true\r\n        try {\r\n            await agent.Activities.delete(id)\r\n            runInAction(() => {\r\n                // this.activities = [...this.activities.filter(act => act.id !== id)]\r\n                this.activityRegistry.delete(id)                \r\n                this.loading = false\r\n            })\r\n        } catch (error) {\r\n            console.log(error.response)\r\n            runInAction(() => {              \r\n                this.loading = false                \r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user\r\n        this.loading = true\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id)\r\n            runInAction(() => {\r\n                if(this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username)\r\n                    this.selectedActivity.isGoing = false\r\n                }else{\r\n                    const attendee = new Profile(user!)\r\n                    this.selectedActivity?.attendees?.push(attendee)\r\n                    this.selectedActivity!.isGoing = true\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    cancelActivitiyToggle = async () => {\r\n        this.loading = true\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id)\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })            \r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../../..\";\r\nimport { User, UserFormValues } from \"../../models/user\"\r\nimport agent from \"../agent\";\r\nimport { store } from \"./Store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false\r\n\r\n    constructor () {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn(){\r\n        return !!this.user\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds)\r\n            store.commonStore.setToken(user.token)\r\n            runInAction(() => this.user = user)\r\n            history.push(\"/activities\")\r\n            console.log(user)\r\n            store.modalStore.closeModal()\r\n        } catch (error) {\r\n            throw error\r\n        }\r\n    }    \r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null)\r\n        window.localStorage.removeItem(\"jwt\")\r\n        this.user = null\r\n        history.push(\"/\")\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds)\r\n            store.commonStore.setToken(user.token)\r\n            runInAction(() => this.user = user)\r\n            history.push(\"/activities\")\r\n            console.log(user)\r\n            store.modalStore.closeModal()\r\n        } catch (error) {\r\n            throw error\r\n        }\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current()\r\n            runInAction(() => this.user = user)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    // Check if user is already logged into facebook\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === \"connected\") {\r\n                this.fbAccessToken = response.authResponse.accessToken\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token)\r\n                runInAction(() => {\r\n                    this.user = user\r\n                    this.fbLoading = false\r\n                })\r\n                history.push(\"activities\")                \r\n            }).catch(error => {\r\n                console.log(error.response)\r\n                runInAction(() => this.fbLoading = false)\r\n            })\r\n        }\r\n        if(this.fbAccessToken){\r\n            apiLogin(this.fbAccessToken)\r\n        }else{\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken)\r\n            }, \r\n            { // Optional - ask for extra profile data as well as token\r\n                scope: 'public_profile, email'\r\n            })\r\n        }\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./ActivityStore\";\r\nimport CommentStore from \"./CommentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./ModalStore\";\r\nimport UserStore from \"./UserStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore   \r\n    commonStore: CommonStore\r\n    userStore: UserStore\r\n    modalStore: ModalStore\r\n    commentStore: CommentStore\r\n}\r\n\r\n// Here you add individual stores to the global Store\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    commentStore: new CommentStore(),\r\n}\r\n\r\n// Here you create React Context with you entire Store\r\nexport const StoreContext = createContext(store)\r\n\r\n// Last we export it \r\nexport function useStore() {\r\n    return useContext(StoreContext)\r\n}","import { makeAutoObservable, reaction } from \"mobx\"\r\nimport { ServerError } from \"../../models/ServerError\"\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null\r\n    token: string | null = window.localStorage.getItem(\"jwt\")\r\n    appLoaded = false\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        // This is run when this.token changes sp we can control the token \r\n        // in browser storage via this property\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem(\"jwt\", token)\r\n                } else {\r\n                    window.localStorage.removeItem(\"jwt\")\r\n                }\r\n            }\r\n\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error\r\n    }\r\n\r\n    setToken = (token: string | null) => {        \r\n        this.token = token\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean\r\n    body: JSX.Element | null\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor () {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true\r\n        this.modal.body = content\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false\r\n        this.modal.body = null\r\n    }\r\n\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../../models/Comments\";\r\nimport { store } from \"./Store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = []\r\n    hubConnection: HubConnection | null = null\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection?.start().catch(error => console.log(\"Error stopping SignalR\", error))\r\n\r\n            this.hubConnection.on(\"LoadComments\", (comments: ChatComment[]) => {\r\n                runInAction(() => {                                     \r\n                    comments.forEach(comment => {                        \r\n                        comment.createdAt = new Date(comment.createdAt)                        \r\n                    })\r\n                    this.comments = comments\r\n                })\r\n            })\r\n\r\n            this.hubConnection.on(\"ReceiveComment\", (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt)\r\n                    this.comments.unshift(comment)\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log(\"Error stopping SignalR\", error))\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = []\r\n        this.stopHubConnection()\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id\r\n        try {\r\n            // This will call a method on the server: ChatHub.SendComment\r\n            await this.hubConnection?.invoke(\"SendComment\", values)\r\n        }catch(error){\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n}","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { Menu, Container, Button, Image, Dropdown } from 'semantic-ui-react'\r\nimport { useStore } from '../api/stores/Store'\r\n\r\n\r\nexport default observer(function NavBar () {\r\n    const {userStore: {user, logout}} = useStore()    \r\n    \r\n    return (\r\n        <Menu inverted fixed=\"top\">\r\n            <Container>\r\n                <Menu.Item as={NavLink} to=\"/\" exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: 10}}/>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to=\"/activities\" name=\"Activities\" />\r\n\r\n                <Menu.Item as={NavLink} to=\"/errors\" name=\"Errors\" />\r\n\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to=\"/createActivity\" positive content=\"Create Activity\" />\r\n                </Menu.Item>\r\n\r\n                <Menu.Item position=\"right\">\r\n                    <Image src={user?.image || \"/assets/user.png\"} avatar spaced=\"right\" />\r\n                    <Dropdown pointing=\"top left\" text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profile/${user?.username}`} text=\"My Profile\" icon=\"user\" />\r\n                            <Dropdown.Item onClick={logout} text=\"logout\" icon=\"power\" />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/Profile';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function({profile}: Props) {\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>Bio goes here</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name=\"user\" />\r\n                20 followers\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Image, List, Popup } from 'semantic-ui-react'\r\nimport { Profile } from '../../../app/models/Profile'\r\nimport ProfileCard from '../../profiles/ProfileCard'\r\n\r\ninterface Props {\r\n    attendees: Profile[]\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({attendees}: Props) {\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup \r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image size=\"mini\" circular src={attendee.image || \"/assets/user.png\"} />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>                \r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from 'date-fns'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity'\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee'\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem ({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && (\r\n                    <Label attached=\"top\" color=\"red\" content=\"Cancelled\" style={{textAlign: \"center\"}} />\r\n                )}\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size=\"tiny\" circular src=\"/assets/user.png\" />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>{activity.title}</Item.Header>\r\n                            <Item.Description>Hosted by {activity.host?.displayName}</Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color=\"orange\">\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color=\"green\">\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name=\"clock\" /> {format(activity.date!, \"dd MMM yyyy h:mm aa\")}\r\n                    <Icon name=\"marker\" /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link} \r\n                    to={`/activities/${activity.id}`} \r\n                    color=\"teal\" \r\n                    floated=\"right\"\r\n                    content=\"View\" />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite'\r\nimport React, { Fragment } from 'react'\r\nimport { Item, Header, Segment } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/Store'\r\nimport ActivityListItem from './ActivityListItem'\r\n\r\nexport default observer(function ActivityList () {\r\n    const {activityStore} = useStore()    \r\n    const {groupedActivities} = activityStore\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color=\"teal\">\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map((activity) => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})","import React from \"react\"\r\nimport { Dimmer, Loader } from \"semantic-ui-react\"\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = \"Loading...\"}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}","import React from 'react'\r\nimport Calendar from 'react-calendar'\r\nimport { Header, Menu } from 'semantic-ui-react'\r\n\r\nexport default function ActivityFilters () {\r\n    return (\r\n        <>\r\n            <Menu vertical size=\"large\" style={{width: \"100%\", marginTop: 25}}>\r\n                <Header icon=\"filter\" attached color=\"teal\" content=\"filters\" />\r\n                <Menu.Item content=\"All Activities\" />\r\n                <Menu.Item content=\"I'm going\" />\r\n                <Menu.Item content=\"I'm hosting\" />                \r\n            </Menu>\r\n            <Header />\r\n            <Calendar />\r\n        </>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/Store'\r\nimport ActivityList from './ActivityList'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent'\r\nimport ActivityFilters from './ActivityFilters'\r\n\r\nexport default observer(function ActivityDashboard () {      \r\n        \r\n    const {activityStore} = useStore()\r\n    const {loadActivities, activityRegistry} = activityStore           \r\n\r\n\tuseEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities()\t\t\r\n\t}, [activityRegistry.size, loadActivities])\r\n\r\n\tif(activityStore.loadingInitial) return <LoadingComponent content=\"Loading Activities...\" />\r\n\r\n    return (\r\n        <Grid>            \r\n            <Grid.Column width=\"10\">\r\n                <ActivityList />\r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\">\r\n                <ActivityFilters />                \r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    placeholder: string\r\n    name: string\r\n    type?: string\r\n    label?: string\r\n}\r\n\r\nexport default function MyTextInput (props: Props) {\r\n\r\n    // useField() is a Formik hook which will generate the properties required\r\n    // to integrate your custom input. Use '...field' in your input\r\n    // tag and 'meta' for errors and stuff. The only argument you\r\n    // must give is the name of the input or an object with \r\n    // a property called 'name'.\r\n\r\n    const [field, meta] = useField(props.name)\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n\r\n}","import { ErrorMessage, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Form, Header, Label } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/Store'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\n\r\nexport default observer(function LoginForm() {\r\n\r\n    const {userStore} = useStore()\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{email: \"\", password: \"\", error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error =>\r\n                setErrors({error: \"Invalid email or password\"}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <Header as=\"h2\" content=\"Login to Reactivities\" color=\"teal\" />\r\n                    <MyTextInput name=\"email\" placeholder=\"Email\" />\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\r\n                    <ErrorMessage\r\n                        name=\"error\"\r\n                        render={() => <Label style={{marginBottom: 10}} basic color=\"red\" content={errors.error} />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content=\"Login\" type=\"submit\" fluid />\r\n                </Form>\r\n            )}\r\n        \r\n        </Formik>\r\n    )\r\n})","import React from 'react'\r\nimport { Message } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    errors: any\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {      \r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((error: any, i: any) => (\r\n                        <Message.Item key={i}>{error}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Form, Header, Label } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/Store'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport * as Yup from 'yup'\r\nimport ValidationErrors from '../errors/ValidationErrors'\r\n\r\nexport default observer(function RegisterForm() {\r\n\r\n    const {userStore} = useStore()\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName:\"\", username: \"\", email: \"\", password: \"\", error: null}}\r\n            onSubmit={(values, {setErrors}) => \r\n                userStore.register(values).catch(error =>\r\n                    setErrors({error})\r\n                )\r\n            }\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <Header as=\"h2\" content=\"Register to Reactivities\" color=\"teal\" />\r\n                    <MyTextInput name=\"displayName\" placeholder=\"Display Name\" />\r\n                    <MyTextInput name=\"username\" placeholder=\"Username\" />\r\n                    <MyTextInput name=\"email\" placeholder=\"Email\" />\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\r\n                    <ErrorMessage\r\n                        name=\"error\"\r\n                        render={() => <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content=\"Register\" type=\"submit\" fluid />\r\n                </Form>\r\n            )}\r\n        \r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Container, Divider, Header, Image, Segment } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/Store'\r\nimport LoginForm from '../users/LoginForm'\r\nimport RegisterForm from '../users/RegisterForm'\r\n\r\nexport default observer(function HomePage() {\r\n    const {userStore, modalStore} = useStore()\r\n    \r\n    return (\r\n        <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\r\n            <Container text>\r\n                <Header as=\"h1\" inverted>\r\n                    <Image size=\"massive\" src=\"/assets/logo.png\" alt=\"logo\" style={{marginBottom: 12}} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as=\"h2\" inverted content=\"Welcome to Reactivities\" />\r\n                        <Button as={Link} to=\"/activities\" size=\"huge\" inverted >\r\n                            Take me to the Activities\r\n                        </Button>\r\n                    </>\r\n                ):(\r\n                    <>\r\n                        <Header as=\"h2\" inverted content=\"Welcome to Reactivities\" />\r\n                        <Button onClick={() => {modalStore.openModal(<LoginForm />)}} size=\"huge\" inverted >\r\n                            Login\r\n                        </Button>\r\n                        <Button onClick={() => {modalStore.openModal(<RegisterForm />)}} size=\"huge\" inverted >\r\n                            Register\r\n                        </Button>\r\n                        <Divider horizontal inverted>Or</Divider>\r\n                        <Button \r\n                            loading={userStore.fbLoading}\r\n                            sixe=\"huge\"\r\n                            inverted\r\n                            color=\"facebook\"\r\n                            content=\"Login with Facebook\"\r\n                            onClick={userStore.facebookLogin}\r\n                        />\r\n                    </>\r\n                )}                                \r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react'\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker'\r\n\r\n\r\nexport default function MyDateInput (props: Partial<ReactDatePickerProps>) {\r\n    \r\n    const [field, meta, helpers] = useField(props.name!)\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value) || null)}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n\r\n}","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label, Select } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    placeholder: string\r\n    name: string\r\n    options: any\r\n    label?: string\r\n}\r\n\r\nexport default function MySelectInput (props: Props) {\r\n    const [field, meta, helpers] = useField(props.name)\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable \r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(event, data) => helpers.setValue(data.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n\r\n}","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    placeholder: string\r\n    name: string\r\n    rows: number\r\n    label?: string\r\n}\r\n\r\nexport default function MyTextArea (props: Props) {\r\n    const [field, meta] = useField(props.name)\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n\r\n}","export const categoryOptions = [\r\n    {text: \"Drinks\", value: \"drinks\"},\r\n    {text: \"Culture\", value: \"culture\"},\r\n    {text: \"Film\", value: \"film\"},\r\n    {text: \"Food\", value: \"food\"},\r\n    {text: \"Music\", value: \"music\"},\r\n    {text: \"Travel\", value: \"travel\"},\r\n]","import { observer } from 'mobx-react-lite'\r\nimport React, {useEffect, useState} from 'react'\r\nimport { Link, useHistory, useParams } from 'react-router-dom'\r\nimport {Button, Header, Segment} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/Store'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent'\r\nimport { Formik, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport MyTextInput from '../../../app/common/form/MyTextInput'\r\nimport MyDateInput from '../../../app/common/form/MyDateInput'\r\nimport MySelectInput from '../../../app/common/form/MySelectInput'\r\nimport MyTextArea from '../../../app/common/form/MyTextArea'\r\nimport { categoryOptions } from '../../../app/common/form/options/CategoryOptions'\r\nimport { ActivityFormValues } from '../../../app/models/activity'\r\nimport {v4 as uuid} from 'uuid'\r\n\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory()\r\n    const {activityStore} = useStore()\r\n    const {createActivity, updateActivity, loadingInitial, loadActivity} = activityStore\r\n    const {id} = useParams<{id: string}>()\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues())\r\n    \r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity])\r\n\r\n    // Yup is lightweight and simply allows us to make validation\r\n    // schema's which integrate cleanly into Formik forms, \r\n    // just make sure your field names match up!\r\n    \r\n    const validationShema = Yup.object({\r\n        title: Yup.string().required(\"The activity title is required\"),\r\n        description: Yup.string().required(\"The activity description is required\"),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required(\"Date is required\").nullable(),\r\n        city: Yup.string().required(),\r\n        venue: Yup.string().required(),\r\n    })\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        console.log(activity)\r\n        if(!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            }\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        }else{\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content=\"Activity Details\" sub color=\"teal\" />\r\n            <Formik \r\n                validationSchema={validationShema} // This accepts Yup.object({}) as argument\r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\r\n                    <Form className=\"ui form\" onSubmit={handleSubmit}>\r\n                        <MyTextInput name=\"title\" placeholder=\"Title\" />                    \r\n                        <MyTextArea name=\"description\" placeholder=\"Description\" rows={4} />\r\n                        <MySelectInput name=\"category\" placeholder=\"Category\" options={categoryOptions} />\r\n                        <MyDateInput                            \r\n                            name=\"date\" \r\n                            placeholderText=\"Date\" \r\n                            showTimeSelect\r\n                            timeCaption=\"time\"\r\n                            dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                        />\r\n                        <Header content=\"Location Details\" sub color=\"teal\" />\r\n                        <MyTextInput name=\"city\" placeholder=\"City\" />\r\n                        <MyTextInput name=\"venue\" placeholder=\"Venue\" />\r\n                        \r\n                        <Button disabled={isSubmitting || !dirty || !isValid} loading={isSubmitting} floated=\"right\" positive type=\"submit\" content=\"Submit\" />\r\n                        <Button as={Link} to=\"/activities\" floated=\"right\" type=\"button\" content=\"Cancel\" />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/Store'\r\nimport * as Yup from 'yup'\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\r\n\r\n    const {commentStore} = useStore()\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId)\r\n        }\r\n        return () => {\r\n            commentStore.clearComments()\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, {resetForm}) => {                            \r\n                        commentStore.addComment(values).then(() => resetForm())\r\n                    }}\r\n                    initialValues={{body: \"\"}}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({isSubmitting, isValid, handleSubmit}) => (\r\n                        <Form className=\"ui form\">\r\n                            <Field name=\"body\">\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{position: \"relative\"}}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea \r\n                                            placeholder=\"Enter your comment (Ender to submit, SHIFT + enter for a line break)\"    \r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === \"Enter\" && e.shiftKey) {\r\n                                                    return\r\n                                                } \r\n                                                if (e.key === \"Enter\") {\r\n                                                    e.preventDefault()\r\n                                                    isValid && handleSubmit()\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map((comment, c) => (\r\n                        <Comment key={c}>\r\n                            <Comment.Avatar src='/assets/user.png'/>\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace: \"pre-wrap\"}}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}                    \r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/Store';\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendance, loading, cancelActivitiyToggle}} = useStore()\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && (\r\n                    <Label \r\n                        style={{position: \"absolute\", zIndex: 1000, left: -14, top: 20}}\r\n                        ribbon\r\n                        color=\"red\"\r\n                        content=\"Cancelled\"     \r\n                    />\r\n                )}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, \"dd MMM yyyy\")}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button \r\n                            color={activity.isCancelled ? \"green\" : \"red\"} \r\n                            floated=\"left\"\r\n                            basic\r\n                            content={activity.isCancelled ? \"Re-activity Activity\" : \"Cancel Activity\"}    \r\n                            onClick={cancelActivitiyToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button \r\n                            as={Link} \r\n                            to={`/manage/${activity.id}`} \r\n                            disabled={activity.isCancelled}\r\n                            color='orange' \r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>                    \r\n                ) : activity.isGoing ? (\r\n                    <Button \r\n                        disabled={activity.isCancelled} \r\n                        loading={loading} \r\n                        onClick={updateAttendance}>\r\n                        Cancel attendance\r\n                    </Button>\r\n                ) : (\r\n                    <Button \r\n                        disabled={activity.isCancelled} \r\n                        loading={loading} \r\n                        onClick={updateAttendance} \r\n                        color='teal'>\r\n                        Join Activity\r\n                    </Button>                \r\n                )}                \r\n                \r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","\r\nimport { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, \"dd MMM yyyy h:mm aa\")}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\r\n    if(!attendees) return null\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? \"Person\" : \"People\" } Going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item key={attendee.username} style={{ position: 'relative' }}>\r\n                            {attendee.username === host?.username && (\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            )}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}                    \r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n\r\n\r\n\r\n\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/api/stores/Store'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent'\r\nimport ActivityDetailedChat from './ActivityDetailedChat'\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader'\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo'\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar'\r\n\r\n\r\nexport default observer(function ActivityDetails () {\r\n    \r\n    const {activityStore} = useStore()\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore\r\n    const {id} = useParams<{id: string}>()\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id)\r\n        return () => clearSelectedActivity()\r\n    }, [id, loadActivity, clearSelectedActivity])\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent/>\r\n\r\n    if (!activity) return <LoadingComponent />\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","\r\nimport React, {useState} from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && <ValidationErrors errors={errors} />}\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name=\"search\" />\r\n                Oops - we've looked everywhere and could not find this                \r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to=\"/activities\" primary>\r\n                    Return to activities\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Container, Header, Segment } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/api/stores/Store'\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore()\r\n\r\n    return (\r\n        <Container>\r\n            <Header as=\"h1\" content=\"Server Error\" />\r\n            <Header sub as=\"h5\" color=\"red\" content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as=\"h4\" content=\"Stack trace\" color=\"teal\" />\r\n                    <code style={{marginTop: 10}}>{commonStore.error.details}</code>    \r\n                </Segment>}\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Modal } from 'semantic-ui-react'\r\nimport { useStore } from '../../api/stores/Store'\r\n\r\nexport default observer(function ModalContainer () {\r\n    const {modalStore} = useStore()\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size=\"mini\">\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../api/stores/Store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore()\r\n\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to=\"/\" />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport {ToastContainer} from \"react-toastify\"\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../api/stores/Store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n\n\tconst location = useLocation()\n\tconst {commonStore, userStore} = useStore()\n\n\t// This is where we re-authenticate after a page refresh\n\tuseEffect(() => {\n\t\tif (commonStore.token) {\n\t\t\tuserStore.getUser().finally(() => commonStore.setAppLoaded())\n\t\t}else{\n\t\t\tuserStore.getFacebookLoginStatus()\n\t\t\t\t.then(() => commonStore.setAppLoaded())\n\t\t\t\n\t\t}\n\t}, [commonStore, userStore])\n\t\n\tif(!commonStore.appLoaded) return <LoadingComponent />\n\n\treturn (\n\t\t<>\n\t\t\t<ToastContainer position=\"bottom-right\" hideProgressBar />\n\t\t\t<ModalContainer />\n\t\t\t<Route exact path=\"/\" component={HomePage} />\n\t\t\t<Route path={'/(.+)'} render={() => (\n\t\t\t\t<>\n\t\t\t\t\t<NavBar />\n\t\t\t\t\t<Container style={{marginTop: 100}}>\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<PrivateRoute exact path=\"/activities\" component={ActivityDashboard} />\n\t\t\t\t\t\t\t<PrivateRoute path=\"/activities/:id\" component={ActivityDetails} />\t\t\t\t\n\t\t\t\t\t\t\t<PrivateRoute path={[\"/createActivity\", \"/manage/:id\"]} key={location.key} component={ActivityForm} />\n\t\t\t\t\t\t\t<Route path=\"/errors\" component={TestErrors} />\t\t\t\n\t\t\t\t\t\t\t<Route path=\"/server-error\" component={ServerError} />\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t{/* Use 404 page for default route */}\n\t\t\t\t\t\t\t<Route component={NotFound} />\t\t\t\t\n\t\t\t\t\t\t</Switch>\t\t\t\t\t\t\n\t\t\t\t\t</Container>\t\n\t\t\t\t</>\n\t\t\t)} />\n\t\t\t\t\t\t\n\t\t</>\n\t);\n}\n\nexport default observer(App) \n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","//              ___            ________      ___________              ___ \n//             /  $$          / $$ $$$ $$    |  $$ $$ $$            /  $$\n//            /  $$$$       /  $$    \\  $$   |  $$   \\  $$         /  $$$$\n//           /  $$  $$     |  $$      \\  $$  |  $$    | $$        /  $$  $$\n//          /  $$    $$    |  $$       | $$  |  $$   /  $$       /  $$    $$\n//         /  $$ $$$$ $$   |  $$       | $$  |  $$ $$ $$        /  $$ $$$$ $$\n//        /  $$_______ $$  |  $$       | $$  |  $$  \\  $$      /  $$_______ $$ \n//       /  $$       \\  $$  \\  $$     / $$   |  $$   \\  $$    /  $$       \\  $$\n//      /__$$         \\__$$  \\__$$ $$$ $$    |__$$    \\__$$  /__$$         \\__$$\n//\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history'\nimport 'semantic-ui-css/semantic.min.css'\nimport 'react-calendar/dist/Calendar.css'\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport './app/layout/style.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/api/stores/Store';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\n// This history object can be used throughout the application\n// so long as you import it from here and also pass it\n// into the Router componenet. It is very useful!\nexport const history = createBrowserHistory()\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n        <Router history={history}>            \n            <ScrollToTop />\n            <App />\n        </Router>        \n    </StoreContext.Provider>, \n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}